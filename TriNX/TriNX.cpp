//==============================================================================
//        This file was generated by the NX Block UI Styler
//        Created by: Zhulei
//              Version: NX 8.5
//              Date: 05-16-2013  (Format: mm-dd-yyyy)
//              Time: 19:20 (Format: hh-mm)
//
//==============================================================================
#include "TriNX.hpp"
using namespace NXOpen;
using namespace NXOpen::BlockStyler;
//------------------------------------------------------------------------------
// Initialize static variables
//------------------------------------------------------------------------------
Session *(TriNX::theSession) = NULL;
UI *(TriNX::theUI) = NULL;
//------------------------------------------------------------------------------
// Constructor for NX Styler class
//------------------------------------------------------------------------------
TriNX::TriNX()
{
    try
    {
        // Initialize the NX Open C++ API environment
        TriNX::theSession = NXOpen::Session::GetSession();
        TriNX::theUI = UI::GetUI();
        theDlxFileName = "TriNX.dlx";
        theDialog = TriNX::theUI->CreateDialog(theDlxFileName);
        // Registration of callback functions
        theDialog->AddApplyHandler(make_callback(this, &TriNX::apply_cb));
        theDialog->AddOkHandler(make_callback(this, &TriNX::ok_cb));
        theDialog->AddUpdateHandler(make_callback(this, &TriNX::update_cb));
        theDialog->AddInitializeHandler(make_callback(this, &TriNX::initialize_cb));
        theDialog->AddDialogShownHandler(make_callback(this, &TriNX::dialogShown_cb));
    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        throw;
    }
}
//------------------------------------------------------------------------------
// Destructor for NX Styler class
//------------------------------------------------------------------------------
TriNX::~TriNX()
{
    if (theDialog != NULL)
    {
        delete theDialog;
        theDialog = NULL;
    }
}
//------------------------------- DIALOG LAUNCHING ---------------------------------
    extern "C" DllExport void  ufusr(char *param, int *retcod, int param_len)
    {
        TriNX *theTriNX = NULL;
        try
        {
            theTriNX = new TriNX();
            // The following method shows the dialog immediately
            theTriNX->Show();
        }
        catch(exception& ex)
        {
            //---- Enter your exception handling code here -----
            TriNX::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
        }
        if(theTriNX != NULL)
        {
            delete theTriNX;
            theTriNX = NULL;
        }
    }
#if USER_EXIT
    
    //------------------------------------------------------------------------------
    // This method specifies how a shared image is unloaded from memory
    // within NX. This method gives you the capability to unload an
    // internal NX Open application or user  exit from NX. Specify any
    // one of the three constants as a return value to determine the type
    // of unload to perform:
    //
    //
    //    Immediately : unload the library as soon as the automation program has completed
    //    Explicitly  : unload the library from the "Unload Shared Image" dialog
    //    AtTermination : unload the library when the NX session terminates
    //
    //
    // NOTE:  A program which associates NX Open applications with the menubar
    // MUST NOT use this option since it will UNLOAD your NX Open application image
    // from the menubar.
    //------------------------------------------------------------------------------
    extern "C" DllExport int ufusr_ask_unload()
    {
        //return (int)Session::LibraryUnloadOptionExplicitly;
        return (int)Session::LibraryUnloadOptionImmediately;
        //return (int)Session::LibraryUnloadOptionAtTermination;
    }
    
    //------------------------------------------------------------------------------
    // Following method cleanup any housekeeping chores that may be needed.
    // This method is automatically called by NX.
    //------------------------------------------------------------------------------
    extern "C" DllExport void ufusr_cleanup(void)
    {
        try
        {
            //---- Enter your callback code here -----
        }
        catch(exception& ex)
        {
            //---- Enter your exception handling code here -----
            TriNX::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
        }
    }
#endif//USER_EXIT
    
    int TriNX::Show()
    {
        try
        {
            theDialog->Show();
        }
        catch(exception& ex)
        {
            //---- Enter your exception handling code here -----
            TriNX::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
        }
        return 0;
    }
    
#if CALLBACK
    //------------------------------------------------------------------------------
    //Method name: Show_TriNX
    //------------------------------------------------------------------------------
    void TriNX::Show_TriNX()
    {
        TriNX *theTriNX = NULL;
        try
        {
            theTriNX = new TriNX();
            // The following method shows the dialog immediately
            theTriNX->Show();
        }
        catch(exception& ex)
        {
            //---- Enter your exception handling code here -----
            TriNX::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
        }
        if(theTriNX != NULL)
        {
            delete theTriNX;
            theTriNX = NULL;
        }
    }
#endif//CALLBACK
    
    //------------------------------------------------------------------------------
    //---------------------Block UI Styler Callback Functions--------------------------
    //------------------------------------------------------------------------------
    
    //------------------------------------------------------------------------------
    //Callback Name: initialize_cb
    //------------------------------------------------------------------------------
    void TriNX::initialize_cb()
    {
        try
        {
            group0 = dynamic_cast<NXOpen::BlockStyler::Group*>(theDialog->TopBlock()->FindBlock("group0"));
            drawingArea0 = dynamic_cast<NXOpen::BlockStyler::DrawingArea*>(theDialog->TopBlock()->FindBlock("drawingArea0"));
            button0 = dynamic_cast<NXOpen::BlockStyler::Button*>(theDialog->TopBlock()->FindBlock("button0"));
            button01 = dynamic_cast<NXOpen::BlockStyler::Button*>(theDialog->TopBlock()->FindBlock("button01"));
            button02 = dynamic_cast<NXOpen::BlockStyler::Button*>(theDialog->TopBlock()->FindBlock("button02"));
            button03 = dynamic_cast<NXOpen::BlockStyler::Button*>(theDialog->TopBlock()->FindBlock("button03"));
            list_box0 = dynamic_cast<NXOpen::BlockStyler::ListBox*>(theDialog->TopBlock()->FindBlock("list_box0"));
            list_box01 = dynamic_cast<NXOpen::BlockStyler::ListBox*>(theDialog->TopBlock()->FindBlock("list_box01"));
            point0 = dynamic_cast<NXOpen::BlockStyler::SpecifyPoint*>(theDialog->TopBlock()->FindBlock("point0"));
            //------------------------------------------------------------------------------
            //Registration of ListBox specific callbacks
            //------------------------------------------------------------------------------
            //list_box0->SetAddHandler(make_callback(this, &TriNX::AddCallback));
            
            //list_box0->SetDeleteHandler(make_callback(this, &TriNX::DeleteCallback));
            
            //------------------------------------------------------------------------------
        }
        catch(exception& ex)
        {
            //---- Enter your exception handling code here -----
            TriNX::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
        }
    }
    
    //------------------------------------------------------------------------------
    //Callback Name: dialogShown_cb
    //This callback is executed just before the dialog launch. Thus any value set 
    //here will take precedence and dialog will be launched showing that value. 
    //------------------------------------------------------------------------------
    void TriNX::dialogShown_cb()
    {
        try
        {
            //---- Enter your callback code here -----
        }
        catch(exception& ex)
        {
            //---- Enter your exception handling code here -----
            TriNX::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
        }
    }
    
    //------------------------------------------------------------------------------
    //Callback Name: apply_cb
    //------------------------------------------------------------------------------
    int TriNX::apply_cb()
    {
        int errorCode = 0;
        try
        {
            //---- Enter your callback code here -----
        }
        catch(exception& ex)
        {
            //---- Enter your exception handling code here -----
            errorCode = 1;
            TriNX::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
        }
        return errorCode;
    }
    
    //------------------------------------------------------------------------------
    //Callback Name: update_cb
    //------------------------------------------------------------------------------
    int TriNX::update_cb(NXOpen::BlockStyler::UIBlock* block)
    {
        try
        {
            if(block == drawingArea0)
            {
            //---------Enter your code here-----------
            }
            else if(block == button0)
            {
            //---------Enter your code here-----------
            }
            else if(block == button01)
            {
            //---------Enter your code here-----------
            }
            else if(block == button02)
            {
            //---------Enter your code here-----------
            }
            else if(block == button03)
            {
            //---------Enter your code here-----------
            }
            else if(block == list_box0)
            {
            //---------Enter your code here-----------
            }
            else if(block == list_box01)
            {
            //---------Enter your code here-----------
            }
            else if(block == point0)
            {
            //---------Enter your code here-----------
            }
        }
        catch(exception& ex)
        {
            //---- Enter your exception handling code here -----
            TriNX::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
        }
        return 0;
    }
    
    //------------------------------------------------------------------------------
    //Callback Name: ok_cb
    //------------------------------------------------------------------------------
    int TriNX::ok_cb()
    {
        int errorCode = 0;
        try
        {
            errorCode = apply_cb();
        }
        catch(exception& ex)
        {
            //---- Enter your exception handling code here -----
            errorCode = 1;
            TriNX::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
        }
        return errorCode;
    }
    //------------------------------------------------------------------------------
    //ListBox specific callbacks
    //------------------------------------------------------------------------------
    //int TriNX::AddCallback (NXOpen::BlockStyler::ListBox* list_box)
    //{
    //}
    
    //int TriNX::DeleteCallback(NXOpen::BlockStyler::ListBox* list_box)
    //{
    //}
    
    //------------------------------------------------------------------------------
    
    //------------------------------------------------------------------------------
    //Function Name: GetBlockProperties
    //Description: Returns the propertylist of the specified BlockID
    //------------------------------------------------------------------------------
    PropertyList* TriNX::GetBlockProperties(const char *blockID)
    {
        return theDialog->GetBlockProperties(blockID);
    }
